Array 数组
Java 语言中提供的数组是用来存储固定大小的同类型元素。（格子里面的数据可以为空null）

声明数组变量
dataType[] arrayRefVar; //首选方法
string int... 数组的名字

dataType arrayRefVar[]; //效果相同，但不是首选方法

例子

double[] myList;

创建数组
arrayRefVar = new dataType[arraySize];
arrayRefVar[0] = data;
一、使用 dataType[arraySize] 创建了一个数组。
二、把新创建的数组的引用赋值给变量 

dataType[] arrayRefVar = {value0, value1, ..., valuek};
int[] arrayA = {1,2,3,4,5,6};
栈->全栈工程师 Full stack engineer（FSE）

处理数组
double[] myList = {1.9, 2.9, 3.4, 3.5};
// 打印所有数组元素

// 计算所有元素的总和

// 查找最大元素


foreach循环（快速打印array中的data）
public class TestArray {
   public static void main(String[] args) {
      double[] myList = {1.9, 2.9, 3.4, 3.5};
 
      // 打印所有数组元素
      for (double element: myList) {
         System.out.println(element);
      }
   }
}

多维的数组2D
type arrayName = new type[arraylength1][arraylength2];

int a[][]= new int[2][3];

Arrays 类
java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。

具有以下功能：

给数组赋值：通过 fill 方法。
对数组排序：通过 sort 方法,按升序。
比较数组：通过 equals 方法比较数组中元素值是否相等。
查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。(算法)
具体说明请查看下表：

1	public static int binarySearch(Object[] a, Object key)
用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(插入点) - 1)。
2	public static boolean equals(long[] a, long[] a2)
如果两个指定的 long 型数组彼此相等，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。
3	public static void fill(int[] a, int val)
将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。
4	public static void sort(Object[] a)
对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。
